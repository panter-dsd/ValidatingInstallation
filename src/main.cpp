/*
 *  Boost Software License - Version 1.0 - August 17th, 2003
 *
 *  Permission is hereby granted, free of charge, to any person or organization
 *  obtaining a copy of the software and accompanying documentation covered by
 *  this license (the "Software") to use, reproduce, display, distribute,
 *  execute, and transmit the Software, and to prepare derivative works of the
 *  Software, and to permit third-parties to whom the Software is furnished to
 *  do so, all subject to the following:
 *
 *  The copyright notices in the Software and this entire statement, including
 *  the above license grant, this restriction and the following disclaimer,
 *  must be included in all copies of the Software, in whole or in part, and
 *  all derivative works of the Software, unless such copies or derivative
 *  works are solely in the form of machine-executable object code generated by
 *  a source language processor.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#include <iostream>
#include <vector>

#include "abstractchecker.h"
#include "servicechecker.h"
#include "processchecker.h"

typedef std::vector <AbstractChecker*> CheckersCache;
CheckersCache checkersCache;

AbstractChecker *getChecker (int argc, char **argv)
{

	for (CheckersCache::const_iterator it = checkersCache.begin(),
		end = checkersCache.end(); it != end; ++it) {
		if ((*it)->isOpen(argc, argv)) {
			return (*it)->clone();
		}
	}

	return 0;
}

int main (int argc, char **argv)
{
	int result = 0;

	checkersCache.push_back (new ServiceChecker);
	checkersCache.push_back (new ProcessChecker);
	
	AbstractChecker *checker = getChecker (argc, argv);

	if (checker) {
		result = checker->check (argc, argv);

		std::cout << checker->lastError() << std::endl;
	}
	
	return result;
}
